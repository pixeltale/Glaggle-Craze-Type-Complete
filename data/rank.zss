# Rank code adopted from Shiyo Kakuge's add004
#===============================================================================
# Global states (not halted by Pause/SuperPause, no helper limitations)
#===============================================================================
[StateDef -4]

if !const(Default.Enable.Rank) || teamSide = 0 {
	# do nothing, global code disabled locally or executed by stage
} else if isHelper {
	# parry detection
	ignoreHitPause if helperName = "Parry Detection" && moveHit = 1 {
		mapSet{map: "_iksys_rankParryStateNo"; value: root,stateNo; redirectId: root,id}
	}
} else if roundState = 0 {
	mapSet{map: "_iksys_rankParryStateNo"; value: 0}
	mapSet{map: "_iksys_rankLifeFlag"; value: 0}
	mapSet{map: "_iksys_rankHitOverriddenStateNo"; value: 0}
	mapSet{map: "_iksys_rankFirstAttackFlag"; value: 0}
	mapSet{map: "_iksys_rankComboCount"; value: 0}
	mapSet{map: "_iksys_rankWinFlag"; value: 0}
} else ignoreHitPause if roundState > 0 {
	# life (v_Tech_Life)
	if win && alive && map(_iksys_rankLifeFlag) = 0 {
		rankAdd{value: float(life) / lifeMax / (numPartner + 1) * 30; type: "life"; max: 30}
		mapSet{map: "_iksys_rankLifeFlag"; value: 1}
	}
	# enemy in GetHit or Dizzy states (v_Tech_Attack)
	if stateNo = const(StateStandGetHit_shaking) || stateNo = const(StateCrouchGetHit_shaking) || stateNo = const(StateAirGetHit_shaking) || stateNo = const(StateTrippedGetHit_shaking) || getHitVar(isbound) || dizzy {
		rankAdd{value: 0.05 / (enemy,numPartner + 1); type: "attack"; max: 36; redirectId: enemy,id}
	}
	# blocking states or parry (v_Tech_Guard)
	if hitOverridden {
		mapSet{map: "_iksys_rankHitOverriddenStateNo"; value: stateNo}
	} else if map(_iksys_rankHitOverriddenStateNo) > 0 && map(_iksys_rankHitOverriddenStateNo) != stateNo {
		mapSet{map: "_iksys_rankHitOverriddenStateNo"; value: 0}
	}
	if stateNo = [const(StateGuard_start), const(StateAirGuardHit_knockedAway)] || map(_iksys_rankHitOverriddenStateNo) > 0 || map(_iksys_rankParryStateNo) > 0 {
		rankAdd{value: 0.05 / (enemy,numPartner + 1); type: "guard"; max: 31}
	}
	# parry (v_Tech_Parry)
	if map(_iksys_rankHitOverriddenStateNo) > 0 || map(_iksys_rankParryStateNo) > 0 {
		rankAdd{value: 0.001 / (enemy,numPartner + 1); type: "tech"; max: 38}
	}
	if map(_iksys_rankParryStateNo) > 0 && map(_iksys_rankParryStateNo) != stateNo {
		mapSet{map: "_iksys_rankParryStateNo"; value: 0}
	}
	# no guard (v_Tech_NoGuard)
	if inGuardDist && stateNo = [const(StateWalk), const(StateGuard_start) - 1] {
	  rankAdd{value: 0.00001 / (enemy,numPartner + 1); type: "tech"; max: 38}
	}
	# first attack (is_First_Attack)
	if firstAttack && map(_iksys_rankFirstAttackFlag) = 0 {
		rankAdd{value: 5; type: "tech"; max: 38; icon: "fa"}
		mapSet{map: "_iksys_rankFirstAttackFlag"; value: 1}
	}
	# code executed only by P1 and P2
	if playerNo = teamSide {
		# max combo (v_Tech_MaxCombo)
		if min(25, comboCount) > map(_iksys_rankComboCount) {
			rankAdd{value: comboCount - map(_iksys_rankComboCount); type: "tech"; max: 38}
			mapSet{map: "_iksys_rankComboCount"; value: comboCount}
		}
		# win type (bonus_tech)
		if win && map(_iksys_rankWinFlag) = 0 {
			if winPerfect { # is_Perfect
				rankAdd{value: 15; type: "tech"; max: 38; icon: "p"}
			}
			if winHyper { # is_Hyper_Finish
				rankAdd{value: 20; type: "tech"; max: 38; icon: "hf"}
			} else if winSpecial { # is_Special_Finish
				rankAdd{value: 10; type: "tech"; max: 38; icon: "sf"}
			}
			mapSet{map: "_iksys_rankWinFlag"; value: 1}
		}
	}
}
